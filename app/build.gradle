apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.fernandocejas.frodo'
apply plugin: 'com.frogermcs.androiddevmetrics'
frodo {
    enabled = true
}
android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")

        applicationId globalConfiguration.getAt("androidApplicationId")
        versionCode globalConfiguration.getAt("androidVersionCode")
        versionName globalConfiguration.getAt("androidVersionName")
        //multiDexEnabled true
    }
    signingConfigs {
        Key {
            try {
                storeFile file(globalConfiguration.getAt("keystore"))
                storePassword globalConfiguration.getAt("keystorePass")
                keyAlias globalConfiguration.getAt("alias")
                keyPassword globalConfiguration.getAt("aliasPass")
            }
            catch (ignored) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.Key
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
        }
        applicationVariants.all { variant ->
            // configApkFileName(variant, defaultConfig)
        }
    }
    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/rxjava.properties'
    }
    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'MissingTranslation'
        disable 'InvalidPackage'            //Some libraries have issues with this.
        disable 'OldTargetApi'
        //Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'IconDensities'             //For testing purpose. This is safe to remove.
        disable 'IconMissingDensityFolder'  //For testing purpose. This is safe to remove.
    }
    dexOptions {
        javaMaxHeapSize "4g" // used by the out-of-process Jack, ignored if running in-process
    }
    sourceSets {
        main {
            res.srcDirs = [
                    'src/main/res-main',
                    file('src/main/res-screen')
                            .listFiles()
                            .each { res.srcDirs += it.path }
            ]
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    /*configurations {
        all*.exclude module: 'rxjava'
        all*.exclude module: 'rxandroid'
    }*/
}

dependencies {
    def supportDependencies = rootProject.ext.supportDependencies
    def injectDependencies = rootProject.ext.injectDependencies
    def networkDependencies = rootProject.ext.networkDependencies
    def appDependencies = rootProject.ext.appDependencies

    compile supportDependencies.supportCompat
    compile supportDependencies.supportDesign
    compile supportDependencies.supportRecyclerView
    compile supportDependencies.supportCardView
    compile supportDependencies.constraintLayout

    //----- Butterknife
    compile supportDependencies.butterKnife
    annotationProcessor supportDependencies.butterknifeCompiler

    //----- Dagger
    compile injectDependencies.dagger
    annotationProcessor injectDependencies.daggerCompiler

    //----- Rx
    compile injectDependencies.rxjava
    compile injectDependencies.rxandroid
    compile injectDependencies.rxbinding

    //----- Network
    compile networkDependencies.retrofit
    compile networkDependencies.okHttp
    compile networkDependencies.okHttpLogging
    compile networkDependencies.retrofitGsonConverter
    compile networkDependencies.retrofitRxJavaAdapter
    compile networkDependencies.glide
    compile networkDependencies.reactivenetwork

    //App
    compile appDependencies.baseRecyclerView
    compile(appDependencies.drawer) {
        transitive = true;
    }
}

@SuppressWarnings("GroovyAssignabilityCheck")
static def configApkFileName(variant, defaultConfig) {
    variant.outputs.each { output ->
        if (variant.buildType.name == android.buildTypes.debug.name) {
            if (output.zipAlign) {
                def file = output.outputFile
                output.outputFile = new File(file.parentFile, variant.buildType.name + "_v"
                        + defaultConfig.versionName + "_"
                        + defaultConfig.versionCode
                        + ".apk")
            }
        } else if (variant.buildType.name == android.buildTypes.release.name) {
            if (output.zipAlign) {
                def file = output.outputFile
                output.outputFile = new File(file.parentFile, "uHotel" + variant.buildType.name
                        + "_v" + defaultConfig.versionName + "_"
                        + defaultConfig.versionCode
                        + ".apk")
            }
        }
    }
}
